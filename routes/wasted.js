// routes/waste.js
import { Router } from "express";
import { fetchWastedRowsCached } from "../src/services/wastedFetcherCached.js";
import {
  monthKey,
  prevMonth,
  latestDistinctMonthsSet,
  filterRowsByMonths,
} from "../src/helpers/dateFilter.js";

const router = Router();

const PEOPLE_IN_BUILDING = 372; // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà SSS ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
const UNIT_COST_WASTED = 2.28; // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ó‡∏°./‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏•

// GET /api/v1/wasted/json?gid=XXXX
router.get("/json", async (req, res) => {
  try {
    const { gid, month, year } = req.query;

    // ‚úÖ ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ: ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    const { rows, cached, fetchedAt } = await fetchWastedRowsCached({
      gid,
      month,
      year,
    });

    res.json({
      count: rows.length,
      cached,
      fetched_at: new Date(fetchedAt).toISOString(),
      ttl_days: Number(process.env.CACHE_TTL_DAYS || 30),
      rows,
    });
  } catch (err) {
    res.status(500).json({ error: String(err.message || err) });
  }
});

// Display on SSS to user see
/**
 * GET /api/v1/wasted/latest_four-quarterly
 *
 * ‡∏™‡∏£‡∏∏‡∏õ 4 ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á "‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 *
 * Query:
 *   - gid (string, optional): Google Sheet GID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å)
 *
 * Behavior (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î):
 *   - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ fetchWastedRowsCached({ gid })
 *   - ‡∏´‡∏≤ maxDate ‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á r.date (‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD)
 *   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á 4 ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å maxDate (‡πÄ‡∏ä‡πà‡∏ô ["Q4/2024","Q1/2025","Q2/2025","Q3/2025"])
 *   - ‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 4 ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß
 *   - ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤:
 *       ‚Ä¢ total_waste_kg: ‡∏ñ‡πâ‡∏≤ r.total_waste_kg > 0 ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 *                         ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì = general + organic + recycle + hazardous
 *       ‚Ä¢ landfill_waste_kg: ‡∏ñ‡πâ‡∏≤ r.landfill_waste_kg > 0 ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 *                            ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô fallback = general_waste_kg
 *       ‚Ä¢ carbon_emission_kgco2e: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ r.carbon_emission_kgco2e ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 *                                 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ r.carbon_emission_kgco2e_per_kg (‡∏ï‡∏£‡∏á ‡πÜ)
 *   - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "YYYY-MM" (months_included)
 *
 * Response:
 * {
 *   "quarterly_summary": {
 *     "Q3/2024": {
 *       "months_included": ["2024-07", "2024-08", "2024-09"],
 *       "total_general_waste_kg": <number>,
 *       "total_organic_waste_kg": <number>,
 *       "total_recycle_waste_kg": <number>,
 *       "total_hazardous_waste_kg": <number>,
 *       "total_landfill_waste_kg": <number>,
 *       "total_waste_kg": <number>,
 *       "total_carbon_emission_kgco2e": <number>
 *     },
 *     "Q4/2024": { ... },
 *     "Q1/2025": { ... },
 *     "Q2/2025": { ... }
 *   }
 * }
 *
 * Notes:
 *   - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏û‡∏≤‡∏£‡πå‡∏™‡πÅ‡∏ö‡∏ö‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô number (‡πÄ‡∏ä‡πà‡∏ô "1,406.5" -> 1406.5)
 *   - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢ ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô { quarterly_summary: {} }
 *   - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á fields "records" ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
 */
router.get("/wasted-latest_four-quarterly", async (req, res) => {
  try {
    const { gid } = req.query;
    // console.log("[latest_four-quarterly] gid =", gid);

    const fetched = await fetchWastedRowsCached({ gid });
    const rows = Array.isArray(fetched) ? fetched : (fetched?.rows ?? []);
    if (!rows.length) return res.json({ quarterly_summary: {} });

    // üîπ Helper functions
    const num = (v) => {
      const n = Number(String(v ?? "").toString().replace(/,/g, "").trim());
      return Number.isFinite(n) ? n : 0;
    };
    const q = (m) => Math.floor((m - 1) / 3) + 1; // 1..4
    const qKey = (d) => `Q${q(d.getMonth() + 1)}/${d.getFullYear()}`;
    const prevQ = ({ q, y }) => (q > 1 ? { q: q - 1, y } : { q: 4, y: y - 1 });
    const monthKey = (d) =>
      `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}`;

    // üîπ 1) ‡∏´‡∏≤ max date
    const maxDate = rows.reduce((mx, r) => {
      if (!r?.date) return mx;
      const d = new Date(r.date);
      return isNaN(d) ? mx : (mx === null || d > mx ? d : mx);
    }, null);
    if (!maxDate) return res.json({ quarterly_summary: {} });
    // console.log("[latest_four-quarterly] maxDate =", maxDate.toISOString());

    // üîπ 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° 4 ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const latest = { q: q(maxDate.getMonth() + 1), y: maxDate.getFullYear() };
    const list = [latest, prevQ(latest), prevQ(prevQ(latest)), prevQ(prevQ(prevQ(latest)))].reverse();
    const keys = list.map(({ q, y }) => `Q${q}/${y}`);
    // console.log("[latest_four-quarterly] allowedKeys =", keys);

    // üîπ 3) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∞‡∏™‡∏° (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° landfill/waste/carbon)
    const init = () => ({
      total_general_waste_kg: 0,
      total_organic_waste_kg: 0,
      total_recycle_waste_kg: 0,
      total_hazardous_waste_kg: 0,
      months: new Set(),
    });

    const accMap = new Map(keys.map((k) => [k, init()]));

    // üîπ 4) ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    for (const r of rows) {
      if (!r?.date) { console.log("[SKIP] missing date", r); continue; }
      const d = new Date(r.date);
      if (isNaN(d)) { console.log("[SKIP] invalid date:", r.date); continue; }

      const key = qKey(d);
      const acc = accMap.get(key);
      if (!acc) continue;

      // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 4 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å
      const gw = num(r.general_waste_kg);
      const ow = num(r.organic_waste_kg);
      const rw = num(r.recycle_waste_kg);
      const hw = num(r.hazardous_waste_kg);

      acc.total_general_waste_kg += gw;
      acc.total_organic_waste_kg += ow;
      acc.total_recycle_waste_kg += rw;
      acc.total_hazardous_waste_kg += hw;

      // ‚úÖ ‡∏à‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á record ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™
      acc.months.add(monthKey(d));
    }

    // üîπ 5) ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 4 ‡∏´‡∏°‡∏ß‡∏î + ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    const summary = keys.reduce((o, k) => {
      const v = accMap.get(k) || init();
      const monthsArr = Array.from(v.months).sort(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‚Üí‡πÉ‡∏´‡∏°‡πà
      o[k] = {
        months_included: monthsArr, // ‡πÄ‡∏ä‡πà‡∏ô ["2025-04","2025-05","2025-06"]
        total_general_waste_kg: v.total_general_waste_kg,
        total_organic_waste_kg: v.total_organic_waste_kg,
        total_recycle_waste_kg: v.total_recycle_waste_kg,
        total_hazardous_waste_kg: v.total_hazardous_waste_kg,
      };
      return o;
    }, {});

    // üîπ 6) ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    return res.json({ quarterly_summary: summary });
  } catch (err) {
    console.error("[latest_four-quarterly] ERROR:", err);
    res.status(500).json({ error: `Server error: ${String(err.message || err)}` });
  }
});


// Display on SSS to user see
/**
 * GET /api/v1/wasted/widget
 *
 * üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Google Sheet (‡∏ú‡πà‡∏≤‡∏ô cache)
 * ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á:
 *   ‚úÖ organic_waste_kg
 *   ‚úÖ hazardous_waste_kg
 *   ‚úÖ landfill_waste_kg
 *
 * ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:
 *   - (sum / PEOPLE_IN_BUILDING) * 1000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏¢‡∏∞‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠ 1000 ‡∏Ñ‡∏ô
 *   - ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (ceil1)
 *   - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö % ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏õ‡∏±‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
 *
 * üßæ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
 * {
 *   "months_used": ["2025-05", "2025-06"],
 *   "organic_summary": [
 *     { "month": "2025-05", "total_kg": 224.0, "computed_value": 603.0 },
 *     { "month": "2025-06", "total_kg": 237.0, "computed_value": 637.0 }
 *   ],
 *   "hazardous_summary": [
 *     { "month": "2025-05", "total_kg": 8.0, "computed_value": 21.5 },
 *     { "month": "2025-06", "total_kg": 6.0, "computed_value": 16.1 }
 *   ],
 *   "landfill_summary": [
 *     { "month": "2025-05", "total_kg": 5400.0, "computed_value": 14516.0 },
 *     { "month": "2025-06", "total_kg": 5500.0, "computed_value": 14784.0 }
 *   ],
 *   "comparison": { ... },               // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö organic
 *   "hazardous_comparison": { ... },     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hazardous
 *   "landfill_comparison": { ... },      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö landfill
 *   "total_rows": 48
 * }
 */
router.get("/widget", async (req, res) => {
  try {
    const { gid } = req.query;

    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡∏ú‡πà‡∏≤‡∏ô cache
    const fetched = await fetchWastedRowsCached({ gid });
    const rows = Array.isArray(fetched) ? fetched : (fetched?.rows ?? []);
    if (!rows.length) {
      return res.json({
        months_used: [],
        organic_summary: [],
        hazardous_summary: [],
        landfill_summary: [],
        comparison: null,
        hazardous_comparison: null,
        landfill_comparison: null,
        total_rows: 0,
      });
    }

    // 2Ô∏è‚É£ ‡∏´‡∏≤ "2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á" ‡πÄ‡∏ä‡πà‡∏ô ["2025-05", "2025-06"]
    const monthsSet = latestDistinctMonthsSet(rows, 2);
    const monthsSorted = Array.from(monthsSet).sort();

    if (monthsSorted.length < 2) {
      const filtered = filterRowsByMonths(rows, monthsSet);
      return res.json({
        months_used: monthsSorted,
        organic_summary: [],
        hazardous_summary: [],
        landfill_summary: [],
        comparison: null,
        hazardous_comparison: null,
        landfill_comparison: null,
        total_rows: filtered.length,
      });
    }

    // 3Ô∏è‚É£ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á 2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const filtered = filterRowsByMonths(rows, monthsSet);

    /**
     * 4Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (field = ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÄ‡∏ä‡πà‡∏ô organic_waste_kg)
     * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö { "YYYY-MM": sum }
     */
    const monthKeySum = (field) => {
      const acc = {};
      for (const r of filtered) {
        if (!r?.date) continue;
        const d = new Date(r.date);
        if (isNaN(d)) continue;
        const key = monthKey(d); // ‡πÄ‡∏ä‡πà‡∏ô "2025-06"
        const val = Number(r[field] ?? 0);
        acc[key] = (acc[key] ?? 0) + val;
      }
      return acc;
    };

    const organicMonthlySum = monthKeySum("organic_waste_kg");
    const hazardousMonthlySum = monthKeySum("hazardous_waste_kg");
    const landfillMonthlySum = monthKeySum("landfill_waste_kg");

    // 5Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏î‡πÄ‡∏•‡∏Ç
    const ceil1 = (n) => Math.ceil(n * 10) / 10;     // ‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const round2 = (n) => Math.round(n * 100) / 100;  // ‡∏õ‡∏±‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á

    /**
     * 6Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô summary ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
     * formula: (sum / PEOPLE_IN_BUILDING) * 1000
     */
    const asSummary = (monthsSorted, monthlySum) =>
      monthsSorted.map((m) => {
        const total = Number(monthlySum[m] ?? 0);
        const perK = (total / PEOPLE_IN_BUILDING) * 1000;
        return {
          month: m,
          total_kg: ceil1(total),       // ‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
          computed_value: ceil1(perK),  // ‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        };
      });

    const organic_summary = asSummary(monthsSorted, organicMonthlySum);
    const hazardous_summary = asSummary(monthsSorted, hazardousMonthlySum);
    const landfill_summary = asSummary(monthsSorted, landfillMonthlySum);

    /**
     * 7Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö 2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô/‡∏•‡∏î‡∏•‡∏á)
     * diff ‡πÑ‡∏°‡πà‡∏õ‡∏±‡∏î, pct_change ‡∏õ‡∏±‡∏î 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
     */
    const compareTwoMonths = (arr) => {
      const prev = arr[0];
      const curr = arr[1];
      const diff = curr.computed_value - prev.computed_value;
      const pct_change =
        prev.computed_value === 0 ? null : round2((diff / prev.computed_value) * 100);

      let direction = "flat";
      if (diff > 0) direction = "up";
      else if (diff < 0) direction = "down";

      return {
        previous_month: prev.month,
        current_month: curr.month,
        previous_value: prev.computed_value,
        current_value: curr.computed_value,
        diff,        // ‡πÑ‡∏°‡πà‡∏õ‡∏±‡∏î
        pct_change,  // ‡∏õ‡∏±‡∏î 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        direction,
      };
    };

    // ‚úÖ hazardous_comparison ‚Äî ‡πÉ‡∏ä‡πâ total_kg, ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pct_change ‡πÅ‡∏•‡∏∞ direction
    const prevVal = hazardous_summary?.[0]?.total_kg ?? 0;
    const currVal = hazardous_summary?.[1]?.total_kg ?? 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    let pct_change = null;
    if (prevVal !== 0) {
      pct_change = ((currVal - prevVal) / prevVal) * 100;
      pct_change = Math.round(pct_change * 100) / 100; // ‚úÖ ‡∏õ‡∏±‡∏î 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    }

    // ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
    let direction = "flat";
    if (pct_change > 0) direction = "up";
    else if (pct_change < 0) direction = "down";

    const hazardous_comparison = {
      previous_month: hazardous_summary?.[0]?.month ?? null,
      current_month: hazardous_summary?.[1]?.month ?? null,
      previous_value: prevVal,
      current_value: currVal,
      diff: null,        // ‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ diff
      pct_change,        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å total_kg
      direction,         // ‚úÖ ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô/‡∏•‡∏î‡∏•‡∏á
    };

    const organic_trend = compareTwoMonths(organic_summary);
    const landfill_comparison = compareTwoMonths(landfill_summary);

    // 8Ô∏è‚É£ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å
    res.json({
      months_used: monthsSorted,
      organic_summary,
      hazardous_summary,
      landfill_summary,
      organic_trend,             // ‡∏Ç‡∏≠‡∏á organic
      hazardous_comparison,   // ‡∏Ç‡∏≠‡∏á hazardous
      landfill_comparison,    // ‡∏Ç‡∏≠‡∏á landfill
      // total_rows: filtered.length,
    });
  } catch (err) {
    console.error("[/widget] ERROR:", err);
    res.status(500).json({ error: String(err.message || err) });
  }
});

// Display on SSS to user see
router.get("/wasted-floors", async (req, res) => {
  try {
    const { gid } = req.query;

    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet (‡∏ú‡πà‡∏≤‡∏ô cache)
    const fetched = await fetchWastedRowsCached({ gid });
    const rows = Array.isArray(fetched) ? fetched : (fetched?.rows ?? []);
    if (!rows.length) {
      return res.json({ month_used: null, month_name_th: null, total_rows: 0, floors: [] });
    }

    // 2Ô∏è‚É£ helpers
    const num = (v) => {
      const n = Number(String(v ?? "").replace(/,/g, "").trim());
      return Number.isFinite(n) ? n : 0;
    };
    const round1 = (n) => Math.round(n * 10) / 10;
    const monthKey = (d) =>
      `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}`;

    // 3Ô∏è‚É£ ‡∏´‡∏≤ "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤" ‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏ï.‡∏Ñ. 2025 -> ‡πÉ‡∏ä‡πâ ‡∏Å.‡∏¢. 2025)
    const now = new Date();
    const prevMonthDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const prevKey = monthKey(prevMonthDate); // "YYYY-MM"

    // 4Ô∏è‚É£ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const filtered = rows.filter((r) => {
      if (!r?.date) return false;
      const d = new Date(r.date);
      if (isNaN(d)) return false;
      return monthKey(d) === prevKey;
    });

    // 5Ô∏è‚É£ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ total_waste_kg ‡∏ï‡∏≤‡∏° floor (‡∏Ç‡πâ‡∏≤‡∏° "‡∏£‡∏ß‡∏°"/"ALL")
    const agg = new Map(); // floor -> sum(total_waste_kg)
    for (const r of filtered) {
      const floorRaw = (r?.floor ?? "").toString().trim();
      if (!floorRaw) continue;
      if (floorRaw === "‡∏£‡∏ß‡∏°" || floorRaw.toUpperCase() === "ALL") continue;

      const totalWaste = num(r.total_waste_kg);
      agg.set(floorRaw, (agg.get(floorRaw) ?? 0) + totalWaste);
    }

    // 6Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á Map -> Array ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡πâ‡∏ô
    let floors = Array.from(agg.entries())
      .map(([floor, total_waste_kg]) => ({ floor, total_waste_kg }))
      .sort((a, b) => {
        const an = Number(a.floor);
        const bn = Number(b.floor);
        const aNum = Number.isFinite(an);
        const bNum = Number.isFinite(bn);
        if (aNum && bNum) return an - bn;
        if (aNum && !bNum) return -1;
        if (!aNum && bNum) return 1;
        return String(a.floor).localeCompare(String(b.floor), "th");
      });

    // 7Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ floor "0" -> ‡πÅ‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô B1/B2 ‡πÇ‡∏î‡∏¢‡∏´‡∏≤‡∏£ 2 ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const floor0 = floors.find((f) => f.floor === "0");
    if (floor0) {
      const half = floor0.total_waste_kg / 2;
      floors = floors.filter((f) => f.floor !== "0");
      floors.unshift(
        { floor: "B1", total_waste_kg: round1(half) },
        { floor: "B2", total_waste_kg: round1(half) }
      );
    }

    // 8Ô∏è‚É£ ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å floor ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    floors = floors.map((f) => ({
      floor: f.floor,
      total_waste_kg: round1(f.total_waste_kg),
    }));

    // üîπ ‡πÅ‡∏õ‡∏•‡∏á month_used ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const monthNamesTH = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ];
    const [year, month] = prevKey.split("-").map(Number);
    const month_name_th = `${monthNamesTH[month - 1]} ${year + 543}`; // ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568"

    // 9Ô∏è‚É£ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    return res.json({
      month_used: prevKey,          // ‡πÄ‡∏ä‡πà‡∏ô "2025-09"
      month_name_th,                // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568"
      total_rows: filtered.length,  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
      floors,                       // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤ total_waste_kg
    });
  } catch (err) {
    console.error("[/wasted-floors] ERROR:", err);
    res.status(500).json({ error: String(err.message || err) });
  }
});


// Display on SSS to user see
/**
 * üìä GET /api/v1/wasted/recycle-rate
 * ----------------------------------------
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (Recycle Rate) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: (recycle_waste_kg / total_waste_kg) * 100
 *
 * ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö query:
 *    - gid: Google Sheet GID (optional)
 *    - year: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
 *    - target: ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 5)
 *
 * ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 *    1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheet ‡∏ú‡πà‡∏≤‡∏ô cache
 *    2. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 *    3. ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏∞‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 *    4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 *    5. ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
 *
 * ‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (Response):
 * {
 *   "RecycleRate": [
 *     { "year": 2025, "month": 1, "recycle_rate_percent": 35, "target": 5 },
 *     { "year": 2025, "month": 2, "recycle_rate_percent": 33, "target": 5 },
 *     ...
 *   ]
 * }
 */
router.get("/recycle-rate", async (req, res) => {
  try {
    const { gid } = req.query;

    // 1Ô∏è‚É£ ‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å query
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1; // JavaScript ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
    const year = Number(req.query.year ?? currentYear);
    const target = Number(req.query.target ?? 5); // ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 5%

    // 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet (‡∏ú‡πà‡∏≤‡∏ô cache)
    const fetched = await fetchWastedRowsCached({ gid });
    const rows = Array.isArray(fetched) ? fetched : (fetched?.rows ?? []);
    if (!rows.length) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á array ‡∏ß‡πà‡∏≤‡∏á
      return res.json({ RecycleRate: [] });
    }

    // 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô string (‡∏°‡∏µ comma) ‚Üí number
    const num = (v) => {
      const n = Number(String(v ?? "").replace(/,/g, "").trim());
      return Number.isFinite(n) ? n : 0;
    };

    // 4Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const endMonth = (year === currentYear)
      ? Math.max(1, currentMonth - 1)
      : 12;

    // 5Ô∏è‚É£ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    //    ‡πÄ‡∏ä‡πà‡∏ô monthAgg[5] = { recycle: 123, total: 500 }
    const monthAgg = {};
    for (let m = 1; m <= endMonth; m++) {
      monthAgg[m] = { recycle: 0, total: 0 };
    }

    // 6Ô∏è‚É£ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ recycle_waste_kg ‡πÅ‡∏•‡∏∞ total_waste_kg ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    for (const r of rows) {
      if (!r?.date) continue;
      const d = new Date(r.date);
      if (isNaN(d)) continue;

      const y = d.getFullYear();
      const m = d.getMonth() + 1;
      if (y !== year) continue;            // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏õ‡∏µ
      if (m < 1 || m > endMonth) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÅ‡∏•‡∏∞ fallback ‡∏ñ‡πâ‡∏≤ total_waste_kg = 0
      const gw = num(r.general_waste_kg);
      const ow = num(r.organic_waste_kg);
      const rw = num(r.recycle_waste_kg);
      const hw = num(r.hazardous_waste_kg);
      const tw = num(r.total_waste_kg);
      const total = tw > 0 ? tw : (gw + ow + rw + hw);

      monthAgg[m].recycle += rw;
      monthAgg[m].total   += total;
    }

    // 7Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô array ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞
    const RecycleRate = [];
    for (let m = 1; m <= endMonth; m++) {
      const { recycle, total } = monthAgg[m] ?? { recycle: 0, total: 0 };
      // ‡∏™‡∏π‡∏ï‡∏£: (recycle / total) * 100 ‚Üí ‡∏õ‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
      const percent = total > 0 ? (recycle / total) * 100 : 0;
      RecycleRate.push({
        year,
        month: m,
        recycle_rate_percent: Math.round(percent), // ‡∏õ‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
        target, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (%)
      });
    }

    // 8Ô∏è‚É£ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    res.json({ RecycleRate });

  } catch (err) {
    // üî¥ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö client
    console.error("[/recycle-rate] ERROR:", err);
    res.status(500).json({ error: String(err.message || err) });
  }
});

// Display on SSS to user see
router.get("/waste-management-information", async (req, res) => {
  try {
    const { gid } = req.query;
    const fetched = await fetchWastedRowsCached({ gid });
    const rows = Array.isArray(fetched) ? fetched : (fetched?.rows ?? []);
    if (!rows.length) {
      return res.json({ months_used: [], landfill_rate: null, cost: null });
    }

    // --- Helper functions ---
    const num = (v) => {
      const n = Number(String(v ?? "").replace(/,/g, "").trim());
      return Number.isFinite(n) ? n : 0;
    };
    const monthKey = (d) =>
      `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}`;
    const round1 = (n) => Math.round(n * 10) / 10;
    const dirOf = (delta) => (delta > 0 ? "up" : delta < 0 ? "down" : "flat");

    // --- ‡∏´‡∏≤ 2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå date ---
    const monthsPresent = new Set();
    for (const r of rows) {
      if (!r?.date) continue;
      const d = new Date(r.date);
      if (!isNaN(d)) monthsPresent.add(monthKey(d));
    }
    const monthsSorted = Array.from(monthsPresent).sort();
    if (monthsSorted.length < 2) {
      return res.json({ months_used: monthsSorted, landfill_rate: null, cost: null });
    }

    const [prevMonthKey, currMonthKey] = monthsSorted.slice(-2);

    // --- ‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (general, hazardous, landfill) ---
    const agg = {
      [prevMonthKey]: { landfill: 0 },
      [currMonthKey]: { landfill: 0 },
    };

    for (const r of rows) {
      if (!r?.date) continue;
      const d = new Date(r.date);
      if (isNaN(d)) continue;
      const mk = monthKey(d);
      if (!agg[mk]) continue;

      const gw = num(r.general_waste_kg);     // ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      const hw = num(r.hazardous_waste_kg);   // ‡∏Ç‡∏¢‡∏∞‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
      const lf = num(r.landfill_waste_kg);    // ‡∏Ç‡∏¢‡∏∞‡∏ù‡∏±‡∏á‡∏Å‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô row)

      const landfill = lf > 0 ? lf : (gw + hw); // ‚úÖ ‡πÉ‡∏ä‡πâ landfill_waste_kg ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
      agg[mk].landfill += landfill;
    }

    const prev = agg[prevMonthKey];
    const curr = agg[currMonthKey];

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏¢‡∏∞‡∏ù‡∏±‡∏á‡∏Å‡∏•‡∏ö (‡∏Å‡∏Å.)
    const landfill_diff_kg = curr.landfill - prev.landfill;

    // --- ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á ‚Äú‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏¢‡∏∞‡∏ù‡∏±‡∏á‡∏Å‡∏•‡∏ö‚Äù
    const percent_change_kg =
      prev.landfill === 0 ? null : round1(((curr.landfill - prev.landfill) / prev.landfill) * 100);

    // --- ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ (kgCO‚ÇÇe)
    const wasted_kgco2e = round1(landfill_diff_kg * 2.32);

    // --- ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ç‡∏¢‡∏∞‡∏ù‡∏±‡∏á‡∏Å‡∏•‡∏ö (‡∏ö‡∏≤‡∏ó)
    const prevCost = prev.landfill * UNIT_COST_WASTED;
    const currCost = curr.landfill * UNIT_COST_WASTED;
    const change_baht = round1(currCost - prevCost);
    const percent_change_cost =
      prevCost === 0 ? null : round1(((currCost - prevCost) / prevCost) * 100);
    const direction_cost = dirOf(change_baht);

    // --- ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏û.‡∏®. ---
    const monthNamesTH = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ];
    const [prevYear, prevMonth] = prevMonthKey.split("-").map(Number);
    const [currYear, currMonth] = currMonthKey.split("-").map(Number);
    const previous_month_name = `${monthNamesTH[prevMonth - 1]} ${prevYear + 543}`;
    const current_month_name = `${monthNamesTH[currMonth - 1]} ${currYear + 543}`;

    // --- ‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å ---
    const landfill_rate = {
      change_kg: round1(landfill_diff_kg),
      wasted_kgco2e,
      percent_change: percent_change_kg,
      direction_kg: dirOf(landfill_diff_kg),
    };

    const cost = {
      change_baht,
      percent_change: percent_change_cost,
      unit_cost_per_kg: UNIT_COST_WASTED,
      direction: direction_cost,
    };

    res.json({
      months_used: [prevMonthKey, currMonthKey],
      previous_month_name,
      current_month_name,
      landfill_rate,
      cost,
    });
  } catch (err) {
    console.error("[/total-cost] ERROR:", err);
    res.status(500).json({ error: String(err.message || err) });
  }
});


export default router;

