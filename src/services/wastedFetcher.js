// src/services/wastedFetcher.js
import { TH_TO_EN_KEYS } from "./mappings.js";

function toIsoDate(dmy) {
  if (!dmy) return "";
  const [d, m, y] = String(dmy).split("/");
  if (!d || !m || !y) return dmy;
  const iso = new Date(Number(y), Number(m) - 1, Number(d));
  if (isNaN(iso)) return dmy;
  const pad = (n) => String(n).padStart(2, "0");
  return `${iso.getFullYear()}-${pad(iso.getMonth() + 1)}-${pad(iso.getDate())}`;
}

function toNum(v) {
  if (v === null || v === undefined) return 0;
  const n = Number(String(v).replace(/,/g, "").trim());
  return Number.isFinite(n) ? n : 0;
}

function normalizeRowThai(row) {
  const out = {};
  for (const [k, v] of Object.entries(row)) {
    const nk = TH_TO_EN_KEYS[k] || k;
    out[nk] = v;
  }

  // üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  if (out.date) out.date = toIsoDate(out.date);

  // üîπ ‡πÅ‡∏õ‡∏•‡∏á floor ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  if (out.floor !== undefined) out.floor = toNum(out.floor);

  // üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  const numFields = [
    "general_waste_kg", // ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    "organic_waste_kg", // ‡∏Ç‡∏¢‡∏∞‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå
    "recycle_waste_kg", // ‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•
    "hazardous_waste_kg", // ‡∏Ç‡∏¢‡∏∞‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
    "total_waste_kg", // ‡∏£‡∏ß‡∏°‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    "landfill_waste_kg", // ‡∏£‡∏ß‡∏°‡∏Ç‡∏¢‡∏∞‡∏ù‡∏±‡∏á‡∏Å‡∏•‡∏ö
    "carbon_emission_kgco2e", // ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô (kgCO2e/kg)
  ];
  numFields.forEach((f) => {
    if (out[f] !== undefined) out[f] = toNum(out[f]);
  });

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏£‡∏ß‡∏°‚Äù ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å)
  const floorRaw = String(row["‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà"] || "").trim();
  if (floorRaw === "‡∏£‡∏ß‡∏°" || floorRaw.toUpperCase() === "ALL" || floorRaw === "0") {
    return null; // ‚ùå ‡∏ï‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô = ‡∏£‡∏ß‡∏°
  }

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á)
  const isEmpty =
    (!out.date || out.date === "") &&
    (!out.submitted_by || out.submitted_by === "") &&
    (out.floor === 0 || out.floor === "") &&
    numFields.every((f) => (out[f] ?? 0) === 0);

  if (isEmpty) {
    return null; // ‚ùå ‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  }

  return out; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
}

/**
 * Fetches waste management data from a Google Sheet and converts it to JSON format.
 *
 * This function will:
 *  - Fetch CSV data from Google Sheets via the export link
 *  - Convert Thai column names to English (e.g. "‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ" ‚Üí "date")
 *  - Convert data types such as dates ‚Üí ISO format, numeric strings ‚Üí numbers
 *  - Remove empty rows or rows where "floor" equals "‡∏£‡∏ß‡∏°" (total)
 *  - Optionally filter the results by a specific month and year
 *
 * @async
 * @function fetchWastedRows
 * @param {Object} [options={}] - Optional parameters
 * @param {string} [options.sheetId] - The Google Sheet ID (e.g. `"1D3tgkPFNRIQ0UoZMK6U2WGJEmxrba98lypwzD4J-kWc"`).
 * If not provided, the function will use the value from `process.env.SHEET_ID`.
 * @param {string|number} [options.gid] - The sheet tab ID (gid) within the spreadsheet. If omitted, the first tab will be used.
 * @param {string|number} [options.month] - Month to filter (e.g. `8` for August).
 * @param {string|number} [options.year] - Year to filter (e.g. `2025`).
 *
 * @returns {Promise<Array<Object>>} A JSON array of cleaned and normalized waste data.
 *
 * @example
 * // üîπ Fetch all data
 * const allRows = await fetchWastedRows();
 *
 * // üîπ Fetch data from a specific tab
 * const tabRows = await fetchWastedRows({ gid: "123456789" });
 *
 * // üîπ Fetch only data for September 2025
 * const septRows = await fetchWastedRows({ month: 9, year: 2025 });
 */
export async function fetchWastedRows({ sheetId, gid, month, year } = {}) {
  // ------------------------------------------------------------------
  // 1) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á CSV ‡∏à‡∏≤‡∏Å Google Sheets
  // ------------------------------------------------------------------
  const sid = sheetId || process.env.SHEET_ID;
  if (!sid) throw new Error("Missing SHEET_ID");

  const base = `https://docs.google.com/spreadsheets/d/${sid}/export?format=csv`;
  const url = gid ? `${base}&gid=${gid}` : base;

  // ------------------------------------------------------------------
  // 2) ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏à‡∏≤‡∏Å Google Sheets
  // ------------------------------------------------------------------
  const resp = await fetch(url);
  if (!resp.ok) throw new Error(`Google Sheet error: ${resp.status}`);

  const text = await resp.text();

  // ------------------------------------------------------------------
  // 3) ‡πÅ‡∏õ‡∏•‡∏á CSV ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  // ------------------------------------------------------------------
  const lines = text.trim().split("\n").filter(Boolean);
  if (!lines.length) return [];

  // ------------------------------------------------------------------
  // 4) ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢: ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î CSV ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  //    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏±‡∏ç‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® ("‚Ä¶")
  //    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô "1,406.75"
  // ------------------------------------------------------------------
  const parseCSVLine = (line) => {
    const out = [];
    let cur = "";
    let inQuotes = false;
    for (let i = 0; i < line.length; i++) {
      const ch = line[i];
      if (ch === '"') {
        if (inQuotes && line[i + 1] === '"') {
          cur += '"';
          i++;
        } else {
          inQuotes = !inQuotes;
        }
      } else if (ch === "," && !inQuotes) {
        out.push(cur);
        cur = "";
      } else {
        cur += ch;
      }
    }
    out.push(cur);
    return out.map((s) => s.trim());
  };

  // ------------------------------------------------------------------
  // 5) ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Object
  // ------------------------------------------------------------------
  const headers = parseCSVLine(lines[0]);
  let rows = lines
    .slice(1)
    .map((line) => {
      const values = parseCSVLine(line);
      const obj = {};
      headers.forEach((h, i) => (obj[h] = (values[i] ?? "").trim()));
      return normalizeRowThai(obj);
    })
    .filter(Boolean);

  // ------------------------------------------------------------------
  // 6) ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡πÄ‡∏•‡∏Ç‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‚Äù ‚Üí ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (float)
  //    - "1,406.75" ‚Üí 1406.75
  //    - "2,500" ‚Üí 2500
  //    - "" / null / undefined / NaN ‚Üí 0
  // ------------------------------------------------------------------
  const toFloat = (v) => {
    const cleaned = String(v ?? "").replace(/,/g, "").trim();
    const n = parseFloat(cleaned);
    return Number.isFinite(n) ? n : 0;
  };

  // ------------------------------------------------------------------
  // 7) ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‚Äù
  // ------------------------------------------------------------------
  const NUM_FIELDS = [
    "floor",
    "general_waste_kg",
    "organic_waste_kg",
    "recycle_waste_kg",
    "hazardous_waste_kg",
    "total_waste_kg",
    "landfill_waste_kg",
    "carbon_emission_kgco2e" // ‚úÖ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ
  ];

  // ------------------------------------------------------------------
  // 8) ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
  // ------------------------------------------------------------------
  rows = rows.map((r0) => {
    const r = { ...r0 };
    for (const f of NUM_FIELDS) {
      if (f in r) r[f] = toFloat(r[f]);
    }
    return r;
  });

  // ------------------------------------------------------------------
  // 9) ‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏¥‡πâ‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏£‡∏ß‡∏°‚Äù ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á
  // ------------------------------------------------------------------
  rows = rows.filter((r) => {
    const isTotal =
      String(r.floor).trim() === "‡∏£‡∏ß‡∏°" ||
      String(r.floor).trim().toUpperCase() === "ALL";

    const isEmpty =
      (!r.date || r.date === "") &&
      (!r.submitted_by || r.submitted_by === "") &&
      (r.floor === 0 || r.floor === "") &&
      r.general_waste_kg === 0 &&
      r.organic_waste_kg === 0 &&
      r.recycle_waste_kg === 0 &&
      r.hazardous_waste_kg === 0 &&
      r.total_waste_kg === 0 &&
      r.landfill_waste_kg === 0 &&
      r.carbon_emission_kgco2e === 0;

    return !isTotal && !isEmpty;
  });

  // ------------------------------------------------------------------
  // 10) ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  // ------------------------------------------------------------------
  if (month && year) {
    rows = rows.filter((r) => {
      if (!r.date) return false;
      const d = new Date(r.date);
      return (
        d.getMonth() + 1 === Number(month) && d.getFullYear() === Number(year)
      );
    });
  }

  // ------------------------------------------------------------------
  // 11) ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
  // ------------------------------------------------------------------
  return rows;
}




